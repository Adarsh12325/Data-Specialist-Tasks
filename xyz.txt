def xor(x, y):
    ans = ""
    for i in range(1, len(y)):
        if x[i] == y[i]:
            ans += '0'
        else:
            ans += '1'
    return ans

def divide(dividend, divisor):
    a = len(divisor)
    temp = dividend[0:a]
    while a < len(dividend):
        if temp[0] == '1':
            temp = xor(divisor, temp) + dividend[a]
        else:
            temp = xor('0' * a, temp) + dividend[a]
        a += 1
    if temp[0] == '1':
        temp = xor(divisor, temp)
    else:
        temp = xor('0' * len(divisor), temp)
    return temp

keys = ['1100000001111', '11000000000000101', '10001000000100001']
print("Choose the CRC")
print("1. CRC - 12")
print("2. CRC - 16")
print("3. CRC - CCITT")

n = int(input("Enter your choice (1/2/3): "))
send = input("Enter the binary data bits (0's and 1's) to be sent from the sender: ")
rec = input("Enter the binary data bits (0's and 1's) received at the receiver side: ")
key = keys[n - 1]

length = len(key)
send1 = send + '0' * (length - 1)
rem = divide(send1, key)

print("\n--- Sender Side ---")
print("Dataword: ", send)
print("Divisor (Key): ", key)
print("Remainder: ", rem)
print("Transmitted Frame: ", send + rem)

ans = divide(rec, key)

print("\n--- Receiver Side ---")
print("Received Frame: ", rec)
if ans == '0' * (len(key) - 1):
    print("No Error Detected")
else:
    print("Frame Error Detected")




def xor(x, y): 
    ans = "" 
    for i in range(1, len(y)): 
        if x[i] == y[i]: 
            ans += '0' 
        else: 
            ans += '1' 
    return ans 
def divide(dividend, divisor): 
    a = len(divisor) 
    temp = dividend[0:a] 
    while a < len(dividend): 
        if temp[0] == '1': 
            temp = xor(divisor, temp) + dividend[a] 
        else: 
            temp = xor('0' * a, temp) + dividend[a] 
        a += 1
 if temp[0] == '1': 
        temp = xor(divisor, temp) 
    else: 
        temp = xor('0' * a, temp) 
    return temp 
# Predefined CRC keys 
keys = ['1100000001111', '11000000000000101', '10001000000100001'] 
print("Choose the CRC") 
print("1. CRC - 12") 
print("2. CRC - 16") 
print("3. CRC - CCITT") 
n = int(input("Enter your choice (1/2/3): ")) 
send = input("Enter the binary data bits (0's and 1's) to be sent from the sender: ") 
rec = input("Enter the binary data bits (0's and 1's) received at the receiver side: ") 
key = keys[n - 1] 
# Encoding (Sender Side) 
length = len(key) 
send1 = send + '0' * (length - 1) 
rem = divide(send1, key) 
print("\n--- Sender Side ---") 
print("Dataword: ", send) 
print("Divisor (Key): ", key) 
print("Remainder: ", rem) 
print("Transmitted Frame: ", send + rem) 
# Decoding (Receiver Side) 
ans = divide(rec, key) 
print("\n--- Receiver Side ---") 
print("Received Frame: ", rec) 
if ans == '0' * (len(key) - 1): 
    print(" No Error Detected") 
else: 
    print(" Frame Error Detected")




Choose the CRC 
1. CRC - 12 
2. CRC - 16 
3. CRC - CCITT 
Enter your choice (1/2/3): 1 
Enter the binary data bits (0's and 1's) to be sent from the sender: 1101011011 
Enter the binary data bits (0's and 1's) received at the receiver side: 
110101101111000011100 --- Sender Side --- 
Dataword:  1101011011 
Divisor (Key):  1100000001111 
Remainder:  110001100100 
Transmitted Frame:  1101011011110001100100 --- Receiver Side --- 
Received Frame:  110101101111000011100 
 Frame Error Detected 

--------------------------------------------------------------------------------------------------------------


INFINITY = 10000
length = [[0 for _ in range(10)] for _ in range(10)]
path = [[0 for _ in range(10)] for _ in range(10)]
adj = []

n = int(input("Enter number of Routers: "))
print("Enter Adjacency Matrix:")
for i in range(n):
    adj.append(list(map(int, input().split())))

for i in range(n):
    for j in range(n):
        if adj[i][j] == 0 and i != j:
            length[i][j] = INFINITY
            path[i][j] = -1
        else:
            length[i][j] = adj[i][j]
            path[i][j] = j
        if i == j:
            path[i][j] = 30

while True:
    updated = False
    for s in range(n):
        for j in range(n):
            if adj[s][j] != 0:
                for i in range(n):
                    if (length[s][j] + length[j][i]) < length[s][i]:
                        length[s][i] = length[s][j] + length[j][i]
                        path[s][i] = j
                        updated = True
    if not updated:
        break

print("\nRouting Table\n")
print("\t", end=" ")
for i in range(65, 65 + n):
    print(f"  {chr(i)} ", end=" ")
print("\n" + "-" * (8 * n))

for s in range(n):
    print(chr(s + 65), end=' ')
    for i in range(n):
        if length[s][i] == INFINITY:
            print(" INF - |", end='')
        elif path[s][i] == 30:
            print(f" {length[s][i]:3d} - |", end='')
        else:
            print(f" {length[s][i]:3d}{chr(path[s][i] + 65)} |", end='')
    print()

    print() 




INFINITY = 10000 
length = [[0 for _ in range(10)] for _ in range(10)] 
path = [[0 for _ in range(10)] for _ in range(10)] 
adj = [] 
# Input 
n = int(input("Enter No of Routers: ")) 
print("Enter Adjacency Matrix:") 
for i in range(n):
      adj.append(list(map(int, input().split()))) 
# Initialization 
for i in range(n): 
    for j in range(n): 
        if adj[i][j] == 0 and i != j: 
            length[i][j] = INFINITY 
            path[i][j] = 0 
        else: 
            length[i][j] = adj[i][j] 
            path[i][j] = j 
        if i == j: 
            path[i][j] = 30   # self path marker 
# Iteration (Distance Vector Update) 
c = 1 
while c: 
    c = 0 
    for s in range(n): 
        for j in range(n): 
            if adj[s][j]: 
                for i in range(n): 
                    if (length[s][j] + length[j][i]) < length[s][i]: 
                        length[s][i] = length[s][j] + length[j][i] 
                        path[s][i] = j 
    for s in range(n): 
        for i in range(n): 
            if length[s][i] == INFINITY: 
                c += 1 
# Printing Routing Table 
print("\nRouting Table\n") 
print("\t", end=" ")
for i in range(65, 65 + n): 
    print("   ", chr(i), end=" ") 
print("\n---------------------------------------------") 
for s in range(n): 
    print(chr(s + 65), end=' ') 
    for i in range(n): 
        if path[s][i] == 30:   # self 
            print(" %3d%3c |" % (length[s][i], '-'), end='') 
        else: 
            print(" %3d%3c |" % (length[s][i], path[s][i] + 65), end='') 
    print()



Enter No of Routers: 4 
Enter Adjacency Matrix: 
6 0 3 2 
5 2 1 3 
2 6 4 3 
6 7 5 2 
Routing Table 
 
      A     B     C     D  --------------------------------------------- 
A    5  C |   9  C |   3  C |   2  D | 
B    3  C |   2  - |   1  C |   3  D | 
C    2  A |   6  B |   4  - |   3  D | 
D    6  A |   7  B |   5  C |   2  - |
